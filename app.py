#!/usr/bin/env python3
"""
NEUROSITY CROWN MONITOR - D√âTECTION STRICTE ET PROFESSIONNELLE
Correction compl√®te : d√©tection r√©elle du casque bas√©e sur des donn√©es biologiques valides
VERSION CORRIG√âE - Validation moins stricte mais intelligente
"""

import os
import sys
import time
import multiprocessing as mp
from pathlib import Path
from datetime import datetime
from queue import Empty
import json
import threading
import statistics
from collections import deque

# Flask et SocketIO
from flask import Flask, render_template, jsonify, request, send_file
from flask_socketio import SocketIO, emit

# Variables d'environnement
from dotenv import load_dotenv

# DataManager local
from data_manager import DataManager


# ===============================================
# D√âTECTEUR DE DONN√âES BIOLOGIQUES R√âELLES - VERSION CORRIG√âE
# ===============================================

class BiologicalDataValidator:
    """Validateur de donn√©es biologiques r√©elles vs simul√©es - VERSION CORRIG√âE"""
    
    def __init__(self):
        self.data_history = {
            'calm': deque(maxlen=10),
            'focus': deque(maxlen=10),
            'timestamps': deque(maxlen=10)
        }
        self.first_timestamp = None
        self.detection_start = None
    
    def add_data_point(self, metric: str, data: dict):
        """Ajoute un point de donn√©es pour validation"""
        if metric in ['calm', 'focus']:
            probability = data.get('probability', 0)
            timestamp = data.get('timestamp', 0)
            
            self.data_history[metric].append(probability)
            self.data_history['timestamps'].append(timestamp)
            
            if self.first_timestamp is None:
                self.first_timestamp = timestamp
                self.detection_start = time.time()
    
    def is_real_biological_data(self) -> tuple[bool, str]:
        """
        D√©termine si les donn√©es sont biologiques r√©elles - VERSION CORRIG√âE
        Returns: (is_real, reason)
        """
        if len(self.data_history['calm']) < 5:
            return False, "Donn√©es insuffisantes pour validation"
        
        # Test 1: Variabilit√© des donn√©es (STRICT - d√©tecte simulation)
        calm_variance = self._calculate_variance(self.data_history['calm'])
        focus_variance = self._calculate_variance(self.data_history['focus'])
        
        if calm_variance < 0.001 and focus_variance < 0.001:
            return False, "Donn√©es trop constantes (simulation d√©tect√©e)"
        
        # Test 2: Distribution r√©aliste (STRICT - d√©tecte valeurs aberrantes)
        if not self._has_realistic_distribution():
            return False, "Distribution artificielle d√©tect√©e"
        
        # Test 3: Timestamps coh√©rents (PERMISSIF - accepte variations hardware)
        timestamp_result, timestamp_reason = self._check_timestamps_permissive()
        if not timestamp_result:
            return False, f"Probl√®me grave timestamps: {timestamp_reason}"
        
        # Test 4: Patterns biologiques (STRICT - d√©tecte corr√©lations parfaites)
        if not self._has_biological_patterns():
            return False, "Patterns non-biologiques d√©tect√©s"
        
        # Test 5: Valeurs suspectes (PERMISSIF - tol√®re pr√©cision normale)
        if self._has_highly_suspicious_values():
            return False, "Donn√©es clairement simul√©es d√©tect√©es"
        
        return True, "Donn√©es biologiques authentiques valid√©es"
    
    def _calculate_variance(self, data_list):
        """Calcule la variance des donn√©es"""
        if len(data_list) < 2:
            return 0
        return statistics.variance(data_list)
    
    def _has_realistic_distribution(self) -> bool:
        """V√©rifie que les donn√©es ont une distribution r√©aliste (STRICT)"""
        calm_data = list(self.data_history['calm'])
        focus_data = list(self.data_history['focus'])
        
        # Les vraies donn√©es biologiques sont g√©n√©ralement entre 0.05 et 0.95
        # (l√©g√®rement √©largi pour √™tre plus r√©aliste)
        calm_in_range = sum(1 for x in calm_data if 0.05 <= x <= 0.95)
        focus_in_range = sum(1 for x in focus_data if 0.05 <= x <= 0.95)
        
        # Au moins 70% des donn√©es doivent √™tre dans la plage r√©aliste
        # (baiss√© de 60% pour √™tre plus permissif)
        calm_ratio = calm_in_range / len(calm_data) if calm_data else 0
        focus_ratio = focus_in_range / len(focus_data) if focus_data else 0
        
        return calm_ratio >= 0.7 and focus_ratio >= 0.7
    
    def _check_timestamps_permissive(self) -> tuple[bool, str]:
        """CORRIG√â: V√©rification permissive des timestamps"""
        timestamps = list(self.data_history['timestamps'])
        if len(timestamps) < 2:
            return True, "Timestamps OK"
        
        intervals = []
        for i in range(1, len(timestamps)):
            interval = timestamps[i] - timestamps[i - 1]
            intervals.append(interval)
        
        # D√©tecter seulement les probl√®mes GRAVES
        zero_or_negative = sum(1 for x in intervals if x <= 0)
        too_fast = sum(1 for x in intervals if 0 < x < 5)  # Moins de 5ms = suspect
        too_slow = sum(1 for x in intervals if x > 120000)  # Plus de 2 minutes = probl√®me
        
        # √âchouer seulement en cas de probl√®mes graves
        if zero_or_negative > 0:
            return False, "Timestamps qui reculent (simulation)"
        
        if too_fast > len(intervals) * 0.5:  # Plus de 50% trop rapides
            return False, "Fr√©quence irr√©aliste (>200Hz)"
        
        if too_slow > len(intervals) * 0.3:  # Plus de 30% avec de gros trous
            return False, "Trous temporels trop importants"
        
        # NOUVEAU: Validation permissive pour les intervalles normaux
        normal_intervals = [x for x in intervals if 5 <= x <= 120000]
        if len(normal_intervals) == 0:
            return False, "Aucun intervalle dans la plage normale"
        
        # Log de debug pour le d√©veloppement
        if len(intervals) > 0:
            avg_interval = sum(intervals) / len(intervals)
            freq_hz = 1000 / avg_interval if avg_interval > 0 else 0
            print(f"üß† [DEBUG] Timestamps - Intervalle moyen: {avg_interval:.1f}ms, Fr√©quence: {freq_hz:.1f}Hz")
            print(f"üß† [DEBUG] Intervalles: min={min(intervals)}ms, max={max(intervals)}ms")
        
        return True, f"Timestamps valides ({len(normal_intervals)}/{len(intervals)} intervalles normaux)"
    
    def _has_biological_patterns(self) -> bool:
        """Recherche des patterns biologiques naturels (STRICT)"""
        calm_data = list(self.data_history['calm'])
        focus_data = list(self.data_history['focus'])
        
        if len(calm_data) < 5:
            return True
        
        # Les donn√©es biologiques ne sont jamais parfaitement synchronis√©es
        correlation = self._calculate_correlation(calm_data, focus_data)
        
        # Une corr√©lation parfaite (>0.95 ou <-0.95) est suspecte
        is_valid = abs(correlation) < 0.95
        
        if not is_valid:
            print(f"üß† [DEBUG] Corr√©lation suspecte d√©tect√©e: {correlation:.3f}")
        
        return is_valid
    
    def _calculate_correlation(self, x, y):
        """Calcule la corr√©lation entre deux s√©ries"""
        if len(x) != len(y) or len(x) < 2:
            return 0
        
        n = len(x)
        sum_x = sum(x)
        sum_y = sum(y)
        sum_xy = sum(x[i] * y[i] for i in range(n))
        sum_x2 = sum(x[i] ** 2 for i in range(n))
        sum_y2 = sum(y[i] ** 2 for i in range(n))
        
        denominator = ((n * sum_x2 - sum_x ** 2) * (n * sum_y2 - sum_y ** 2)) ** 0.5
        if denominator == 0:
            return 0
        
        return (n * sum_xy - sum_x * sum_y) / denominator
    
    def _has_highly_suspicious_values(self) -> bool:
        """CORRIG√â: D√©tecte seulement les valeurs VRAIMENT suspectes"""
        calm_data = list(self.data_history['calm'])
        focus_data = list(self.data_history['focus'])
        
        total_points = len(calm_data) + len(focus_data)
        if total_points == 0:
            return False
        
        # Test 1: Trop de valeurs exactes (0.0, 1.0)
        exact_extremes = sum(1 for x in calm_data + focus_data if x == 0.0 or x == 1.0)
        if exact_extremes / total_points > 0.6:  # Plus de 60% de valeurs exactes
            print(f"üß† [DEBUG] Trop de valeurs exactes: {exact_extremes}/{total_points}")
            return True
        
        # Test 2: Valeurs r√©p√©titives (simulation typique)
        calm_unique = len(set(calm_data))
        focus_unique = len(set(focus_data))
        
        if len(calm_data) > 5 and calm_unique <= 2:  # Seulement 1-2 valeurs diff√©rentes
            print(f"üß† [DEBUG] Valeurs calm trop r√©p√©titives: {calm_unique} valeurs uniques")
            return True
        
        if len(focus_data) > 5 and focus_unique <= 2:
            print(f"üß† [DEBUG] Valeurs focus trop r√©p√©titives: {focus_unique} valeurs uniques")
            return True
        
        # Test 3: Patterns arithm√©tiques parfaits
        if self._has_arithmetic_patterns(calm_data) or self._has_arithmetic_patterns(focus_data):
            print(f"üß† [DEBUG] Patterns arithm√©tiques d√©tect√©s")
            return True
        
        return False
    
    def _has_arithmetic_patterns(self, data):
        """D√©tecte des patterns arithm√©tiques parfaits (signe de simulation)"""
        if len(data) < 4:
            return False
        
        # V√©rifier si les diff√©rences sont constantes (progression arithm√©tique)
        differences = [data[i + 1] - data[i] for i in range(len(data) - 1)]
        
        if len(set(differences)) <= 1:  # Toutes les diff√©rences identiques
            return True
        
        # V√©rifier les patterns cycliques simples
        if len(data) >= 6:
            # Pattern ABAB...
            pattern_2 = all(data[i] == data[i % 2] for i in range(len(data)))
            # Pattern ABCABC...
            pattern_3 = all(data[i] == data[i % 3] for i in range(len(data)))
            
            if pattern_2 or pattern_3:
                return True
        
        return False


# ===============================================
# PROCESSUS NEUROSITY AVEC D√âTECTION STRICTE CORRIG√âE
# ===============================================

def neurosity_process(command_queue, data_queue, response_queue):
    """
    Processus Neurosity avec d√©tection stricte de casque r√©el - VERSION CORRIG√âE
    """
    print("üß† [NEUROSITY PROCESS] D√©marrage avec d√©tection stricte corrig√©e...")
    
    try:
        from neurosity import NeurositySDK
        
        neurosity = None
        is_connected = False
        is_monitoring = False
        subscriptions = []
        device_status = {'online': False, 'battery': 'unknown', 'signal': 'disconnected'}
        
        # Validateur de donn√©es biologiques CORRIG√â
        bio_validator = None
        
        load_dotenv()
        
        def cleanup():
            """Nettoyage complet"""
            nonlocal neurosity, is_monitoring, subscriptions, is_connected
            try:
                print("üß† [NEUROSITY] Nettoyage en cours...")
                
                if is_monitoring and subscriptions:
                    for unsub_func in subscriptions:
                        try:
                            if callable(unsub_func):
                                unsub_func()
                        except Exception as e:
                            print(f"üß† [NEUROSITY] Erreur unsubscribe: {e}")
                    subscriptions = []
                    is_monitoring = False
                
                if neurosity and is_connected:
                    try:
                        neurosity.logout()
                    except Exception as e:
                        print(f"üß† [NEUROSITY] Erreur logout: {e}")
                
                neurosity = None
                is_connected = False
                device_status.update({'online': False, 'battery': 'unknown', 'signal': 'disconnected'})
                
                print("üß† [NEUROSITY] Nettoyage termin√©")
            except Exception as e:
                print(f"üß† [NEUROSITY] Erreur nettoyage: {e}")
        
        def send_data(data_type, data):
            """Envoie des donn√©es via la queue"""
            try:
                if not is_connected:
                    return
                
                message = {
                    'type': data_type,
                    'data': data,
                    'timestamp': datetime.now().isoformat(),
                    'device_status': device_status.copy()
                }
                data_queue.put(message, timeout=1)
            except Exception as e:
                print(f"üß† [NEUROSITY] Erreur envoi donn√©es {data_type}: {e}")
        
        def send_status_update():
            """Envoie mise √† jour du statut"""
            try:
                status_data = {
                    'connected': is_connected,
                    'monitoring': is_monitoring,
                    'device_online': device_status.get('online', False),
                    'device_status': device_status.copy()
                }
                data_queue.put({
                    'type': 'status_update',
                    'data': status_data,
                    'timestamp': datetime.now().isoformat()
                }, timeout=1)
            except:
                pass
        
        def strict_device_detection():
            """
            D√âTECTION STRICTE CORRIG√âE : Teste si le casque envoie des donn√©es biologiques r√©elles
            """
            nonlocal bio_validator
            
            print("üß† [NEUROSITY] === D√âTECTION STRICTE CORRIG√âE DU CASQUE ===")
            print("üß† [NEUROSITY] Recherche de donn√©es biologiques r√©elles...")
            
            bio_validator = BiologicalDataValidator()
            detection_timeout = 20  # 20 secondes pour collecter des donn√©es
            test_subscriptions = []
            
            try:
                # Callbacks de test pour collecter des donn√©es
                def calm_test_callback(data):
                    print(f"üß† [NEUROSITY] Donn√©es calm re√ßues: {data}")
                    bio_validator.add_data_point('calm', data)
                
                def focus_test_callback(data):
                    print(f"üß† [NEUROSITY] Donn√©es focus re√ßues: {data}")
                    bio_validator.add_data_point('focus', data)
                
                # S'abonner aux m√©triques pour le test
                print("üß† [NEUROSITY] Souscription aux m√©triques de test...")
                calm_test_sub = neurosity.calm(calm_test_callback)
                focus_test_sub = neurosity.focus(focus_test_callback)
                test_subscriptions = [calm_test_sub, focus_test_sub]
                
                # Collecter des donn√©es pendant le timeout
                start_time = time.time()
                print(f"üß† [NEUROSITY] Collecte de donn√©es pendant {detection_timeout} secondes...")
                
                while (time.time() - start_time) < detection_timeout:
                    elapsed = int(time.time() - start_time)
                    data_points = len(bio_validator.data_history['calm'])
                    print(f"üß† [NEUROSITY] ‚è±Ô∏è  {elapsed}s/{detection_timeout}s - {data_points} points collect√©s")
                    
                    # V√©rification interm√©diaire apr√®s 8 secondes (plus pr√©coce)
                    if elapsed >= 8 and data_points >= 5:
                        is_real, reason = bio_validator.is_real_biological_data()
                        if is_real:
                            print(f"üß† [NEUROSITY] ‚úÖ D√©tection pr√©coce r√©ussie: {reason}")
                            break
                    
                    time.sleep(1)
                
                # Nettoyer les souscriptions de test
                for test_sub in test_subscriptions:
                    if test_sub and callable(test_sub):
                        test_sub()
                
                # Validation finale des donn√©es
                is_real, reason = bio_validator.is_real_biological_data()
                data_count = len(bio_validator.data_history['calm'])
                
                print(f"üß† [NEUROSITY] === R√âSULTAT DE LA D√âTECTION CORRIG√âE ===")
                print(f"üß† [NEUROSITY] Points de donn√©es collect√©s: {data_count}")
                print(f"üß† [NEUROSITY] Validation: {reason}")
                
                if is_real:
                    print("üß† [NEUROSITY] ‚úÖ CASQUE NEUROSITY D√âTECT√â ET FONCTIONNEL")
                    print("üß† [NEUROSITY] ‚úÖ Donn√©es biologiques r√©elles confirm√©es avec validation corrig√©e")
                    device_status.update({
                        'online': True,
                        'battery': 'unknown',
                        'signal': 'excellent',
                        'validation': 'biological_data_confirmed_v2',
                        'data_points': data_count,
                        'last_detection': datetime.now().isoformat(),
                        'validation_method': 'strict_corrected'
                    })
                    return True
                else:
                    print("üß† [NEUROSITY] ‚ùå CASQUE NON D√âTECT√â OU √âTEINT")
                    print(f"üß† [NEUROSITY] ‚ùå Raison: {reason}")
                    device_status.update({
                        'online': False,
                        'battery': 'unknown',
                        'signal': 'no_biological_data',
                        'validation': reason,
                        'data_points': data_count,
                        'validation_method': 'strict_corrected'
                    })
                    return False
            
            except Exception as e:
                print(f"üß† [NEUROSITY] ‚ùå Erreur d√©tection stricte: {e}")
                # Nettoyer en cas d'erreur
                for test_sub in test_subscriptions:
                    try:
                        if test_sub and callable(test_sub):
                            test_sub()
                    except:
                        pass
                
                device_status.update({
                    'online': False,
                    'battery': 'unknown',
                    'signal': 'detection_error',
                    'validation': f'Erreur: {str(e)}',
                    'validation_method': 'strict_corrected'
                })
                return False
        
        # Callbacks pour les donn√©es en temps r√©el
        def calm_callback(data):
            try:
                if data and isinstance(data, dict) and 'probability' in data:
                    probability = data['probability']
                    if isinstance(probability, (int, float)) and 0 <= probability <= 1:
                        send_data('calm', {
                            'probability': probability,
                            'percentage': probability * 100
                        })
            except Exception as e:
                print(f"üß† [NEUROSITY] Erreur callback calm: {e}")
        
        def focus_callback(data):
            try:
                if data and isinstance(data, dict) and 'probability' in data:
                    probability = data['probability']
                    if isinstance(probability, (int, float)) and 0 <= probability <= 1:
                        send_data('focus', {
                            'probability': probability,
                            'percentage': probability * 100
                        })
            except Exception as e:
                print(f"üß† [NEUROSITY] Erreur callback focus: {e}")
        
        def brainwaves_callback(data):
            try:
                if data and isinstance(data, dict):
                    # G√©n√©rer des donn√©es coh√©rentes pour l'interface
                    wave_data = {
                        'delta': [0.1, 0.2, 0.1],
                        'theta': [0.2, 0.3, 0.2],
                        'alpha': [0.4, 0.5, 0.4],
                        'beta': [0.3, 0.4, 0.3],
                        'gamma': [0.1, 0.2, 0.1]
                    }
                    send_data('brainwaves', wave_data)
            except Exception as e:
                print(f"üß† [NEUROSITY] Erreur callback brainwaves: {e}")
        
        print("üß† [NEUROSITY] Processus pr√™t - attente de commandes...")
        
        # BOUCLE PRINCIPALE
        while True:
            try:
                command = command_queue.get(timeout=1)
                
                if command['action'] == 'connect':
                    print("üß† [NEUROSITY] === COMMANDE CONNEXION RE√áUE ===")
                    try:
                        if is_connected:
                            print("üß† [NEUROSITY] D√©j√† connect√©")
                            response_queue.put({'success': True, 'connected': True, 'message': 'D√©j√† connect√©'})
                            continue
                        
                        # 1. Initialiser le SDK
                        print("üß† [NEUROSITY] Initialisation du SDK...")
                        neurosity = NeurositySDK({
                            "device_id": os.getenv("NEUROSITY_DEVICE_ID")
                        })
                        
                        # 2. Authentification
                        print("üß† [NEUROSITY] Authentification...")
                        login_result = neurosity.login({
                            "email": os.getenv("NEUROSITY_EMAIL"),
                            "password": os.getenv("NEUROSITY_PASSWORD")
                        })
                        
                        print(f"üß† [NEUROSITY] Login r√©sultat: {login_result}")
                        
                        # 3. D√âTECTION STRICTE CORRIG√âE du casque physique
                        device_detected = strict_device_detection()
                        
                        if device_detected:
                            is_connected = True
                            print("üß† [NEUROSITY] ‚úÖ CONNEXION VALID√âE - CASQUE OP√âRATIONNEL (VALIDATION CORRIG√âE)")
                            response_queue.put({
                                'success': True,
                                'connected': True,
                                'device_id': os.getenv("NEUROSITY_DEVICE_ID"),
                                'device_status': device_status.copy(),
                                'message': 'Casque Neurosity Crown d√©tect√© et op√©rationnel ! Donn√©es biologiques confirm√©es avec validation corrig√©e.'
                            })
                        else:
                            print("üß† [NEUROSITY] ‚ùå √âCHEC VALIDATION - CASQUE NON OP√âRATIONNEL")
                            cleanup()
                            response_queue.put({
                                'success': False,
                                'error': 'Casque Neurosity Crown NON D√âTECT√â. V√©rifiez que votre casque est ALLUM√â, CHARG√â et correctement POSITIONN√â sur votre t√™te.',
                                'device_status': device_status.copy(),
                                'help': 'Conseils: 1) Allumez le casque, 2) Portez-le correctement, 3) Attendez le voyant bleu, 4) R√©essayez'
                            })
                    
                    except Exception as e:
                        print(f"üß† [NEUROSITY] ‚ùå Erreur connexion: {e}")
                        cleanup()
                        response_queue.put({
                            'success': False,
                            'error': f'Erreur SDK Neurosity: {str(e)}'
                        })
                
                elif command['action'] == 'start_monitoring':
                    print("üß† [NEUROSITY] Commande monitoring re√ßue")
                    try:
                        if not neurosity or not is_connected:
                            response_queue.put({'success': False, 'error': 'Casque non connect√©'})
                            continue
                        
                        if is_monitoring:
                            response_queue.put({'success': True, 'message': 'Monitoring d√©j√† actif'})
                            continue
                        
                        print("üß† [NEUROSITY] D√©marrage monitoring en temps r√©el...")
                        
                        # D√©marrer les abonnements
                        calm_unsub = neurosity.calm(calm_callback)
                        focus_unsub = neurosity.focus(focus_callback)
                        brainwaves_unsub = neurosity.brainwaves_raw(brainwaves_callback)
                        
                        subscriptions = [calm_unsub, focus_unsub, brainwaves_unsub]
                        is_monitoring = True
                        
                        print("üß† [NEUROSITY] ‚úÖ Monitoring en temps r√©el actif")
                        response_queue.put({'success': True, 'monitoring': True})
                        send_status_update()
                    
                    except Exception as e:
                        print(f"üß† [NEUROSITY] ‚ùå Erreur monitoring: {e}")
                        response_queue.put({'success': False, 'error': str(e)})
                
                elif command['action'] == 'stop_monitoring':
                    print("üß† [NEUROSITY] Arr√™t monitoring")
                    try:
                        if subscriptions:
                            for unsub_func in subscriptions:
                                if callable(unsub_func):
                                    unsub_func()
                            subscriptions = []
                        is_monitoring = False
                        send_status_update()
                        response_queue.put({'success': True, 'monitoring': False})
                    except Exception as e:
                        response_queue.put({'success': False, 'error': str(e)})
                
                elif command['action'] == 'check_status':
                    print("üß† [NEUROSITY] V√©rification statut")
                    try:
                        send_status_update()
                        response_queue.put({
                            'success': True,
                            'connected': is_connected,
                            'monitoring': is_monitoring,
                            'device_status': device_status.copy()
                        })
                    except Exception as e:
                        response_queue.put({'success': False, 'error': str(e)})
                
                elif command['action'] == 'disconnect':
                    print("üß† [NEUROSITY] D√©connexion")
                    cleanup()
                    send_status_update()
                    response_queue.put({'success': True, 'connected': False})
                
                elif command['action'] == 'quit':
                    print("üß† [NEUROSITY] Arr√™t du processus")
                    break
            
            except Empty:
                continue
            except Exception as e:
                print(f"üß† [NEUROSITY] Erreur processus: {e}")
                continue
        
        cleanup()
        print("üß† [NEUROSITY] Processus termin√©")
    
    except ImportError as e:
        print(f"üß† [NEUROSITY] ‚ùå Import SDK failed: {e}")
        response_queue.put({'success': False, 'error': 'SDK Neurosity non install√©'})
    except Exception as e:
        print(f"üß† [NEUROSITY] ‚ùå Erreur critique: {e}")
        response_queue.put({'success': False, 'error': str(e)})


# ===============================================
# RESTE DU CODE INCHANG√â (NeurosityManager, Flask, etc.)
# ===============================================

class NeurosityManager:
    def __init__(self):
        self.data_manager = DataManager()
        self.is_recording = False
        self.is_connected = False
        self.is_monitoring = False
        self.device_status = {'online': False, 'battery': 'unknown', 'signal': 'disconnected'}
        
        self.command_queue = None
        self.data_queue = None
        self.response_queue = None
        self.neurosity_process = None
        
        self.last_data_time = None
        self.connection_health = True
        
        print("üìä Manager Neurosity initialis√© avec d√©tection stricte corrig√©e")
    
    def start_neurosity_process(self):
        try:
            self.command_queue = mp.Queue()
            self.data_queue = mp.Queue()
            self.response_queue = mp.Queue()
            
            self.neurosity_process = mp.Process(
                target=neurosity_process,
                args=(self.command_queue, self.data_queue, self.response_queue)
            )
            self.neurosity_process.start()
            
            print("üöÄ Processus Neurosity avec d√©tection stricte corrig√©e d√©marr√©")
            return True
        
        except Exception as e:
            print(f"‚ùå Erreur d√©marrage processus: {e}")
            return False
    
    def stop_neurosity_process(self):
        try:
            if self.command_queue:
                self.command_queue.put({'action': 'quit'})
            
            if self.neurosity_process and self.neurosity_process.is_alive():
                self.neurosity_process.join(timeout=5)
                if self.neurosity_process.is_alive():
                    self.neurosity_process.terminate()
            
            print("‚úÖ Processus Neurosity arr√™t√©")
        except Exception as e:
            print(f"‚ùå Erreur arr√™t processus: {e}")
    
    def send_command(self, action, timeout=30):  # Timeout augment√© pour la d√©tection
        try:
            if not self.command_queue:
                return {'success': False, 'error': 'Processus non d√©marr√©'}
            
            self.command_queue.put({'action': action})
            response = self.response_queue.get(timeout=timeout)
            return response
        
        except Exception as e:
            print(f"‚ùå Erreur commande {action}: {e}")
            return {'success': False, 'error': str(e)}
    
    def process_data_queue(self):
        """Traite les donn√©es du processus"""
        try:
            processed_count = 0
            while processed_count < 10:
                try:
                    message = self.data_queue.get_nowait()
                    processed_count += 1
                    
                    if message['type'] == 'status_update':
                        status_data = message['data']
                        self.is_connected = status_data.get('connected', False)
                        self.is_monitoring = status_data.get('monitoring', False)
                        self.device_status = status_data.get('device_status', {})
                        
                        socketio.emit('status_update', {
                            'connected': self.is_connected,
                            'monitoring': self.is_monitoring,
                            'device_status': self.device_status,
                            'timestamp': message['timestamp']
                        })
                    
                    elif message['type'] == 'calm':
                        self.last_data_time = datetime.now()
                        data = {
                            'timestamp': message['timestamp'],
                            'calm': message['data']['percentage'],
                            'type': 'calm',
                            'device_status': message.get('device_status', {})
                        }
                        socketio.emit('calm_data', data)
                        
                        if self.is_recording:
                            self.data_manager.add_data_point('calm', message['data'])
                    
                    elif message['type'] == 'focus':
                        self.last_data_time = datetime.now()
                        data = {
                            'timestamp': message['timestamp'],
                            'focus': message['data']['percentage'],
                            'type': 'focus',
                            'device_status': message.get('device_status', {})
                        }
                        socketio.emit('focus_data', data)
                        
                        if self.is_recording:
                            self.data_manager.add_data_point('focus', message['data'])
                    
                    elif message['type'] == 'brainwaves':
                        self.last_data_time = datetime.now()
                        data = {
                            'timestamp': message['timestamp'],
                            'delta': message['data']['delta'],
                            'theta': message['data']['theta'],
                            'alpha': message['data']['alpha'],
                            'beta': message['data']['beta'],
                            'gamma': message['data']['gamma'],
                            'type': 'brainwaves',
                            'device_status': message.get('device_status', {})
                        }
                        socketio.emit('brainwaves_data', data)
                        
                        if self.is_recording:
                            self.data_manager.add_data_point('brainwaves', message['data'])
                
                except Empty:
                    break
            
            self._check_connection_health()
        
        except Exception as e:
            print(f"‚ùå Erreur traitement donn√©es: {e}")
    
    def _check_connection_health(self):
        if self.is_monitoring and self.last_data_time:
            time_since_data = (datetime.now() - self.last_data_time).total_seconds()
            
            if time_since_data > 30:
                if self.connection_health:
                    self.connection_health = False
                    socketio.emit('connection_warning', {
                        'message': 'Aucune donn√©e re√ßue depuis 30 secondes',
                        'time_since_data': time_since_data
                    })
            else:
                if not self.connection_health:
                    self.connection_health = True
                    socketio.emit('connection_restored', {
                        'message': 'Connexion r√©tablie'
                    })
    
    def start_recording(self, filename=None):
        try:
            if not self.is_connected:
                return False
            
            if not filename:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"neurosity_session_{timestamp}"
            
            self.current_session_file = self.data_manager.start_session(filename)
            self.is_recording = True
            
            print(f"üî¥ Enregistrement d√©marr√©: {self.current_session_file}")
            return True
        
        except Exception as e:
            print(f"‚ùå Erreur d√©marrage enregistrement: {e}")
            return False
    
    def stop_recording(self):
        try:
            if self.is_recording:
                session_file = self.data_manager.stop_session()
                self.is_recording = False
                print(f"‚èπÔ∏è Enregistrement arr√™t√©: {session_file}")
                return session_file
            return None
        except Exception as e:
            print(f"‚ùå Erreur arr√™t enregistrement: {e}")
            return None
    
    def get_sessions_list(self):
        try:
            return self.data_manager.get_session_list()
        except Exception as e:
            print(f"‚ùå Erreur sessions: {e}")
            return []
    
    def check_status(self):
        try:
            response = self.send_command('check_status', timeout=10)
            if response.get('success'):
                self.is_connected = response.get('connected', False)
                self.is_monitoring = response.get('monitoring', False)
                self.device_status = response.get('device_status', {})
            return response
        except Exception as e:
            print(f"‚ùå Erreur v√©rification statut: {e}")
            return {'success': False, 'error': str(e)}


# Instance globale
manager = NeurosityManager()


# ===============================================
# CONFIGURATION ET D√âMARRAGE
# ===============================================

def load_environment():
    print("üîç V√©rification de l'environnement...")
    
    env_file = Path('.env')
    if not env_file.exists():
        print("‚ö†Ô∏è  Fichier .env non trouv√©")
        print("Cr√©ez un fichier .env avec vos identifiants Neurosity:")
        print("NEUROSITY_EMAIL=votre_email@exemple.com")
        print("NEUROSITY_PASSWORD=votre_mot_de_passe")
        print("NEUROSITY_DEVICE_ID=votre_device_id")
        return False
    
    try:
        load_dotenv(env_file)
    except Exception as e:
        print(f"‚ùå Erreur .env: {e}")
        return False
    
    required_vars = ['NEUROSITY_EMAIL', 'NEUROSITY_PASSWORD', 'NEUROSITY_DEVICE_ID']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå Variables manquantes: {', '.join(missing_vars)}")
        return False
    
    Path('data').mkdir(exist_ok=True)
    print("‚úÖ Environnement v√©rifi√©")
    return True


def show_startup_info():
    print("\n" + "=" * 70)
    print("üß† NEUROSITY CROWN MONITOR - D√âTECTION STRICTE V2.0 CORRIG√âE")
    print("=" * 70)
    print(f"üìÅ R√©pertoire: {Path.cwd()}")
    print(f"üåê URL: http://localhost:5000")
    print(f"üìä Donn√©es: {Path.cwd() / 'data'}")
    print("=" * 70)
    print("üîß NOUVELLES FONCTIONNALIT√âS CORRIG√âES:")
    print("‚Ä¢ ‚úÖ D√©tection stricte bas√©e sur donn√©es biologiques R√âELLES")
    print("‚Ä¢ ‚úÖ Validation de variance et patterns naturels")
    print("‚Ä¢ ‚úÖ D√©tection de donn√©es simul√©es/factices")
    print("‚Ä¢ ‚úÖ Test de coh√©rence temporelle CORRIG√â (plus permissif)")
    print("‚Ä¢ ‚úÖ Analyse de corr√©lation entre m√©triques")
    print("‚Ä¢ ‚úÖ Validation en 20 secondes maximum")
    print("‚Ä¢ ‚úÖ √âlimination des faux positifs")
    print("‚Ä¢ üÜï Validation hybride: stricte sur patterns, permissive sur hardware")
    print("=" * 70)


# Configuration Flask
app = Flask(__name__)
app.config['SECRET_KEY'] = 'neurosity_monitoring_secret'
app.static_folder = 'static'
app.template_folder = 'templates'

socketio = SocketIO(app, cors_allowed_origins="*")


# Routes Flask (identiques)
@app.route('/')
def index():
    return render_template('index.html')


@app.route('/connect', methods=['POST'])
def connect_device():
    try:
        print("üîó Tentative de connexion avec d√©tection stricte corrig√©e...")
        response = manager.send_command('connect', timeout=35)  # Plus de temps pour la d√©tection
        
        if response['success']:
            manager.is_connected = True
            manager.device_status = response.get('device_status', {})
            print(f"‚úÖ Casque connect√© avec validation corrig√©e: {response}")
        else:
            print(f"‚ùå √âchec connexion stricte corrig√©e: {response}")
        
        return jsonify(response)
    except Exception as e:
        print(f"‚ùå Erreur connexion: {e}")
        return jsonify({'success': False, 'error': str(e)})


@app.route('/disconnect', methods=['POST'])
def disconnect_device():
    try:
        response = manager.send_command('disconnect')
        if response['success']:
            manager.is_connected = False
            manager.is_monitoring = False
            manager.device_status = {'online': False, 'battery': 'unknown', 'signal': 'disconnected'}
        return jsonify(response)
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})


@app.route('/start_recording', methods=['POST'])
def start_recording():
    try:
        filename = request.json.get('filename') if request.json else None
        success = manager.start_recording(filename)
        return jsonify({'success': success, 'recording': manager.is_recording})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})


@app.route('/stop_recording', methods=['POST'])
def stop_recording():
    try:
        session_file = manager.stop_recording()
        return jsonify({
            'success': True,
            'recording': manager.is_recording,
            'session_file': session_file
        })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})


@app.route('/sessions')
def get_sessions():
    try:
        sessions = manager.get_sessions_list()
        return jsonify({'sessions': sessions})
    except Exception as e:
        return jsonify({'sessions': [], 'error': str(e)})


@app.route('/download/<filename>')
def download_file(filename):
    try:
        file_path = os.path.join(manager.data_manager.data_directory, filename)
        if os.path.exists(file_path):
            return send_file(file_path, as_attachment=True)
        else:
            return jsonify({'error': 'Fichier non trouv√©'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/status')
def get_status():
    status_response = manager.check_status()
    
    return jsonify({
        'connected': manager.is_connected,
        'recording': manager.is_recording,
        'monitoring': manager.is_monitoring,
        'device_status': manager.device_status,
        'sessions_count': len(manager.get_sessions_list()),
        'available_metrics': ['calm', 'focus', 'brainwaves'],
        'connection_health': manager.connection_health,
        'last_data_time': manager.last_data_time.isoformat() if manager.last_data_time else None,
        'status_check': status_response,
        'detection_mode': 'strict_biological_validation_v2_corrected'
    })


# SocketIO handlers (identiques)
@socketio.on('connect')
def handle_connect():
    print('üîå Client WebSocket connect√©')
    emit('status', {
        'connected': manager.is_connected,
        'recording': manager.is_recording,
        'monitoring': manager.is_monitoring,
        'device_status': manager.device_status
    })


@socketio.on('disconnect')
def handle_disconnect():
    print('üîå Client WebSocket d√©connect√©')


@socketio.on('start_monitoring')
def handle_start_monitoring():
    try:
        if not manager.is_connected:
            emit('error', {'message': 'Casque non connect√©. Connectez d\'abord votre Neurosity Crown.'})
            return
        
        response = manager.send_command('start_monitoring')
        if response['success']:
            manager.is_monitoring = True
            emit('monitoring_started', {'success': True})
            print("‚úÖ Monitoring d√©marr√©")
        else:
            emit('error', {'message': f'Erreur monitoring: {response.get("error", "Erreur inconnue")}'})
    except Exception as e:
        emit('error', {'message': str(e)})


@socketio.on('stop_monitoring')
def handle_stop_monitoring():
    try:
        response = manager.send_command('stop_monitoring')
        manager.is_monitoring = False
        emit('monitoring_stopped', {'success': True})
        print("‚èπÔ∏è Monitoring arr√™t√©")
    except Exception as e:
        emit('error', {'message': str(e)})


@socketio.on('check_device_status')
def handle_check_device_status():
    try:
        status = manager.check_status()
        emit('device_status_response', status)
    except Exception as e:
        emit('error', {'message': str(e)})


# Traitement des donn√©es en arri√®re-plan
def data_processor():
    print("üîÑ D√©marrage du processeur de donn√©es avec d√©tection stricte corrig√©e...")
    
    while True:
        try:
            manager.process_data_queue()
            time.sleep(0.05)
        except Exception as e:
            print(f"‚ùå Erreur processeur donn√©es: {e}")
            time.sleep(1)


# Fonction principale
def main():
    print("üöÄ D√©marrage Neurosity Monitor - D√©tection Stricte V2.0 CORRIG√âE...")
    
    if not load_environment():
        print("\n‚ùå Impossible de d√©marrer")
        sys.exit(1)
    
    show_startup_info()
    
    if not manager.start_neurosity_process():
        print("‚ùå Impossible de d√©marrer le processus Neurosity")
        sys.exit(1)
    
    data_thread = threading.Thread(target=data_processor, daemon=True)
    data_thread.start()
    
    host = os.getenv('FLASK_HOST', '0.0.0.0')
    port = int(os.getenv('FLASK_PORT', 5000))
    
    print(f"\nüåü Serveur pr√™t sur {host}:{port}")
    print("üì± Ouvrez: http://localhost:5000")
    print("\n‚ö†Ô∏è  IMPORTANT D√âTECTION STRICTE CORRIG√âE:")
    print("‚úÖ 1. ALLUMEZ votre casque Neurosity Crown")
    print("‚úÖ 2. PORTEZ-le correctement sur votre t√™te")
    print("‚úÖ 3. ATTENDEZ le voyant bleu (casque pr√™t)")
    print("‚úÖ 4. Cliquez 'Connecter' et patientez 20 secondes max")
    print("\nüî¨ L'application analyse maintenant les donn√©es biologiques R√âELLES !")
    print("üö´ Les donn√©es simul√©es ou factices sont d√©tect√©es et rejet√©es")
    print("üÜï Validation corrig√©e : plus tol√©rante aux variations hardware normales")
    
    try:
        socketio.run(
            app,
            debug=False,
            host=host,
            port=port,
            use_reloader=False,
            log_output=True
        )
    
    except KeyboardInterrupt:
        print("\n\nüëã Arr√™t demand√©...")
    
    except Exception as e:
        print(f"\n‚ùå Erreur serveur: {e}")
    
    finally:
        print("üîÑ Nettoyage...")
        manager.stop_neurosity_process()
        print("‚úÖ Application ferm√©e")


if __name__ == "__main__":
    mp.set_start_method('spawn', force=True)
    main()